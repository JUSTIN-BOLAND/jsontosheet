var _user$project$Main$splitLine = function (line) {
	var newLine = A2(_elm_lang$core$String$dropLeft, 5, line);
	var indent = A2(
		_elm_lang$core$Result$withDefault,
		0,
		_elm_lang$core$String$toInt(
			A2(_elm_lang$core$String$left, 5, line)));
	return {ctor: '_Tuple2', _0: indent, _1: newLine};
};
var _user$project$Main$pad = function (indent) {
	return A3(
		_elm_lang$core$String$padLeft,
		5,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(indent));
};
var _user$project$Main$px = function ($int) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString($int),
		'px');
};
var _user$project$Main$viewLine = function (lineStr) {
	var _p0 = _user$project$Main$splitLine(lineStr);
	var indent = _p0._0;
	var lineTxt = _p0._1;
	return A2(
		_elm_lang$html$Html$p,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						{
						ctor: '_Tuple2',
						_0: 'paddingLeft',
						_1: _user$project$Main$px(indent)
					},
						{ctor: '_Tuple2', _0: 'marginTop', _1: '0px'},
						{ctor: '_Tuple2', _0: 'marginBottom', _1: '0px'}
					]))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(lineTxt)
			]));
};
var _user$project$Main$model = '[{\"id\":91541985,\"time\":\"2016-10-29 01:48:04 UTC\",\"anon_visitor_id\":\"a86adf6b-910b-2b08-e291-c682\",\"ip_address\":\"76.20.48.125\",\"identity\":null,\"page\":\"https://trueme.goodhire.com/member/report-shared?candidateid=4402330f-4636-4323-a049-5a43643e69f9\",\"referrer\":null,\"user_agent\":\"Mozilla/5.0 (iPad; CPU OS 9_3_4 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13G35\",\"nudge_id\":167540,\"nudge_name\":\"Candidate Satisfaction\",\"answered_questions\":{\"321141\":{\"question_id\":321141,\"question_title\":\"How satisfied are you with your experience with GoodHire?\",\"question_type\":\"radio\",\"answer\":\"Very Satisfied\",\"selected_option_id\":919755}}}]';
var _user$project$Main$incr = 20;
var _user$project$Main$uniqueHead = '##FORMAT##';
var _user$project$Main$newLineChars = ',';
var _user$project$Main$outdentChars = '}';
var _user$project$Main$indentChars = '{';
var _user$project$Main$quote = '\"';
var _user$project$Main$formatString = F3(
	function (isInQuotes, indent, str) {
		var _p1 = A2(_elm_lang$core$String$left, 1, str);
		if (_p1 === '') {
			return '';
		} else {
			var _p2 = _p1;
			return isInQuotes ? (_elm_lang$core$Native_Utils.eq(_p2, _user$project$Main$quote) ? A2(
				_elm_lang$core$Basics_ops['++'],
				_p2,
				A3(
					_user$project$Main$formatString,
					_elm_lang$core$Basics$not(isInQuotes),
					indent,
					A2(_elm_lang$core$String$dropLeft, 1, str))) : A2(
				_elm_lang$core$Basics_ops['++'],
				_p2,
				A3(
					_user$project$Main$formatString,
					isInQuotes,
					indent,
					A2(_elm_lang$core$String$dropLeft, 1, str)))) : (A2(_elm_lang$core$String$contains, _p2, _user$project$Main$newLineChars) ? A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Main$uniqueHead,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Main$pad(indent),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p2,
						A3(
							_user$project$Main$formatString,
							isInQuotes,
							indent,
							A2(_elm_lang$core$String$dropLeft, 1, str))))) : (A2(_elm_lang$core$String$contains, _p2, _user$project$Main$indentChars) ? A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Main$uniqueHead,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Main$pad(indent + _user$project$Main$incr),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p2,
						A3(
							_user$project$Main$formatString,
							isInQuotes,
							indent + _user$project$Main$incr,
							A2(_elm_lang$core$String$dropLeft, 1, str))))) : (A2(_elm_lang$core$String$contains, _p2, _user$project$Main$outdentChars) ? A2(
				_elm_lang$core$Basics_ops['++'],
				_p2,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_user$project$Main$uniqueHead,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Main$pad(indent - _user$project$Main$incr),
						A3(
							_user$project$Main$formatString,
							isInQuotes,
							indent - _user$project$Main$incr,
							A2(_elm_lang$core$String$dropLeft, 1, str))))) : (_elm_lang$core$Native_Utils.eq(_p2, _user$project$Main$quote) ? A2(
				_elm_lang$core$Basics_ops['++'],
				_p2,
				A3(
					_user$project$Main$formatString,
					_elm_lang$core$Basics$not(isInQuotes),
					indent,
					A2(_elm_lang$core$String$dropLeft, 1, str))) : A2(
				_elm_lang$core$Basics_ops['++'],
				_p2,
				A3(
					_user$project$Main$formatString,
					isInQuotes,
					indent,
					A2(_elm_lang$core$String$dropLeft, 1, str)))))));
		}
	});
var _user$project$Main$viewModel = function (model) {
	var lines = A2(
		_elm_lang$core$String$split,
		_user$project$Main$uniqueHead,
		A3(_user$project$Main$formatString, false, 0, model));
	return A2(
		_elm_lang$html$Html$pre,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(_elm_lang$core$List$map, _user$project$Main$viewLine, lines));
};
var _user$project$Main$main = {
	main: _user$project$Main$viewModel(_user$project$Main$model)
};

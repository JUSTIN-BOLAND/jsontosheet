var _user$project$Accio$splitLine = function (line) {
	var newLine = A2(_elm_lang$core$String$dropLeft, 5, line);
	var indent = A2(
		_elm_lang$core$Result$withDefault,
		0,
		_elm_lang$core$String$toInt(
			A2(_elm_lang$core$String$left, 5, line)));
	return {ctor: '_Tuple2', _0: indent, _1: newLine};
};
var _user$project$Accio$pad = function (indent) {
	return A3(
		_elm_lang$core$String$padLeft,
		5,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(indent));
};
var _user$project$Accio$px = function ($int) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString($int),
		'px');
};
var _user$project$Accio$viewLine = function (lineStr) {
	var _p0 = _user$project$Accio$splitLine(lineStr);
	var indent = _p0._0;
	var lineTxt = _p0._1;
	return A2(
		_elm_lang$html$Html$p,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						{
						ctor: '_Tuple2',
						_0: 'paddingLeft',
						_1: _user$project$Accio$px(indent)
					},
						{ctor: '_Tuple2', _0: 'marginTop', _1: '0px'},
						{ctor: '_Tuple2', _0: 'marginBottom', _1: '0px'}
					]))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(lineTxt)
			]));
};
var _user$project$Accio$testString = '[{\"id\":91541985,\"time\":\"2016-10-29 01:48:04 UTC\",\"anon_visitor_id\":\"a86adf6b-910b-2b08-e291-c682\",\"ip_address\":\"76.20.48.125\",\"identity\":null,\"page\":\"https://trueme.goodhire.com/member/report-shared?candidateid=4402330f-4636-4323-a049-5a43643e69f9\",\"referrer\":null,\"user_agent\":\"Mozilla/5.0 (iPad; CPU OS 9_3_4 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13G35\",\"nudge_id\":167540,\"nudge_name\":\"Candidate Satisfaction\",\"answered_questions\":{\"321141\":{\"question_id\":321141,\"question_title\":\"How satisfied are you with your experience with GoodHire?\",\"question_type\":\"radio\",\"answer\":\"Very Satisfied\",\"selected_option_id\":919755}}}]';
var _user$project$Accio$incr = 20;
var _user$project$Accio$uniqueHead = '##FORMAT##';
var _user$project$Accio$newLineChars = ',';
var _user$project$Accio$outdentChars = '}]';
var _user$project$Accio$indentChars = '{[';
var _user$project$Accio$quote = '\"';
var _user$project$Accio$formatString = F4(
	function (acc, isInQuotes, indent, str) {
		formatString:
		while (true) {
			var _p1 = A2(_elm_lang$core$String$left, 1, str);
			if (_p1 === '') {
				return acc;
			} else {
				var _p2 = _p1;
				if (isInQuotes) {
					if (_elm_lang$core$Native_Utils.eq(_p2, _user$project$Accio$quote)) {
						var _v1 = A2(_elm_lang$core$Basics_ops['++'], acc, _p2),
							_v2 = _elm_lang$core$Basics$not(isInQuotes),
							_v3 = indent,
							_v4 = A2(_elm_lang$core$String$dropLeft, 1, str);
						acc = _v1;
						isInQuotes = _v2;
						indent = _v3;
						str = _v4;
						continue formatString;
					} else {
						var _v5 = A2(_elm_lang$core$Basics_ops['++'], acc, _p2),
							_v6 = isInQuotes,
							_v7 = indent,
							_v8 = A2(_elm_lang$core$String$dropLeft, 1, str);
						acc = _v5;
						isInQuotes = _v6;
						indent = _v7;
						str = _v8;
						continue formatString;
					}
				} else {
					if (A2(_elm_lang$core$String$contains, _p2, _user$project$Accio$newLineChars)) {
						var _v9 = A2(
							_elm_lang$core$Basics_ops['++'],
							acc,
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p2,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Accio$uniqueHead,
									_user$project$Accio$pad(indent)))),
							_v10 = isInQuotes,
							_v11 = indent,
							_v12 = A2(_elm_lang$core$String$dropLeft, 1, str);
						acc = _v9;
						isInQuotes = _v10;
						indent = _v11;
						str = _v12;
						continue formatString;
					} else {
						if (A2(_elm_lang$core$String$contains, _p2, _user$project$Accio$indentChars)) {
							var _v13 = A2(
								_elm_lang$core$Basics_ops['++'],
								acc,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Accio$uniqueHead,
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$Accio$pad(indent + _user$project$Accio$incr),
										_p2))),
								_v14 = isInQuotes,
								_v15 = indent + _user$project$Accio$incr,
								_v16 = A2(_elm_lang$core$String$dropLeft, 1, str);
							acc = _v13;
							isInQuotes = _v14;
							indent = _v15;
							str = _v16;
							continue formatString;
						} else {
							if (A2(_elm_lang$core$String$contains, _p2, _user$project$Accio$outdentChars)) {
								var _v17 = A2(
									_elm_lang$core$Basics_ops['++'],
									acc,
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p2,
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$Accio$uniqueHead,
											_user$project$Accio$pad(indent - _user$project$Accio$incr)))),
									_v18 = isInQuotes,
									_v19 = indent - _user$project$Accio$incr,
									_v20 = A2(_elm_lang$core$String$dropLeft, 1, str);
								acc = _v17;
								isInQuotes = _v18;
								indent = _v19;
								str = _v20;
								continue formatString;
							} else {
								if (_elm_lang$core$Native_Utils.eq(_p2, _user$project$Accio$quote)) {
									var _v21 = A2(_elm_lang$core$Basics_ops['++'], acc, _p2),
										_v22 = _elm_lang$core$Basics$not(isInQuotes),
										_v23 = indent,
										_v24 = A2(_elm_lang$core$String$dropLeft, 1, str);
									acc = _v21;
									isInQuotes = _v22;
									indent = _v23;
									str = _v24;
									continue formatString;
								} else {
									var _v25 = A2(_elm_lang$core$Basics_ops['++'], acc, _p2),
										_v26 = isInQuotes,
										_v27 = indent,
										_v28 = A2(_elm_lang$core$String$dropLeft, 1, str);
									acc = _v25;
									isInQuotes = _v26;
									indent = _v27;
									str = _v28;
									continue formatString;
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Accio$viewJson = function (json) {
	var lines = A2(
		_elm_lang$core$String$split,
		_user$project$Accio$uniqueHead,
		A4(_user$project$Accio$formatString, '', false, 0, json));
	return A2(
		_elm_lang$html$Html$pre,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(_elm_lang$core$List$map, _user$project$Accio$viewLine, lines));
};
var _user$project$Accio$viewEntry = function (property) {
	return A2(
		_elm_lang$html$Html$section,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Accio$viewJson(property.value)
			]));
};
var _user$project$Accio$viewKeyedEntry = function (property) {
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Basics$toString(property.id),
		_1: A2(_elm_lang$html$Html_Lazy$lazy, _user$project$Accio$viewEntry, property)
	};
};
var _user$project$Accio$viewEntries = function (properties) {
	return A2(
		_elm_lang$html$Html$section,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('main')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html_Keyed$ul,
				_elm_lang$core$Native_List.fromArray(
					[]),
				A2(_elm_lang$core$List$map, _user$project$Accio$viewKeyedEntry, properties))
			]));
};
var _user$project$Accio$newProperty = F2(
	function (entry, id) {
		return {value: entry, selected: false, id: id};
	});
var _user$project$Accio$format = _elm_lang$core$Native_Platform.outgoingPort(
	'format',
	function (v) {
		return v;
	});
var _user$project$Accio$javascriptValues = _elm_lang$core$Native_Platform.incomingPort('javascriptValues', _elm_lang$core$Json_Decode$string);
var _user$project$Accio$Model = F6(
	function (a, b, c, d, e, f) {
		return {url: a, response: b, field: c, uid: d, selected: e, properties: f};
	});
var _user$project$Accio$init = {
	ctor: '_Tuple2',
	_0: A6(
		_user$project$Accio$Model,
		'',
		'',
		'',
		0,
		false,
		_elm_lang$core$Native_List.fromArray(
			[])),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Accio$Property = F3(
	function (a, b, c) {
		return {value: a, selected: b, id: c};
	});
var _user$project$Accio$Select = function (a) {
	return {ctor: 'Select', _0: a};
};
var _user$project$Accio$FetchFail = function (a) {
	return {ctor: 'FetchFail', _0: a};
};
var _user$project$Accio$FetchSucceed = function (a) {
	return {ctor: 'FetchSucceed', _0: a};
};
var _user$project$Accio$getJson = function (url) {
	return A3(
		_elm_lang$core$Task$perform,
		_user$project$Accio$FetchFail,
		_user$project$Accio$FetchSucceed,
		_evancz$elm_http$Http$getString(
			A2(_elm_lang$core$Basics_ops['++'], 'http://localhost:4000/response?url=', url)));
};
var _user$project$Accio$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'Add':
				var _p4 = _p3._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							uid: model.uid + 1,
							field: _p4,
							properties: A2(
								_elm_lang$core$Basics_ops['++'],
								model.properties,
								_elm_lang$core$Native_List.fromArray(
									[
										A2(_user$project$Accio$newProperty, _p4, model.uid)
									]))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateField':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{field: _p3._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Url':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{url: _p3._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GetData':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Accio$getJson(model.url)
				};
			case 'FetchSucceed':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Accio$format(_p3._0)
				};
			case 'FetchFail':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							response: _elm_lang$core$Basics$toString(_p3._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var updateSelected = function (t) {
					return _elm_lang$core$Native_Utils.eq(t.id, _p3._0) ? _elm_lang$core$Native_Utils.update(
						t,
						{
							selected: _elm_lang$core$Basics$not(t.selected)
						}) : t;
				};
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							properties: A2(_elm_lang$core$List$map, updateSelected, model.properties)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Accio$GetData = {ctor: 'GetData'};
var _user$project$Accio$UpdateField = function (a) {
	return {ctor: 'UpdateField', _0: a};
};
var _user$project$Accio$Add = function (a) {
	return {ctor: 'Add', _0: a};
};
var _user$project$Accio$subscriptions = function (model) {
	return _user$project$Accio$javascriptValues(_user$project$Accio$Add);
};
var _user$project$Accio$Url = function (a) {
	return {ctor: 'Url', _0: a};
};
var _user$project$Accio$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$type$('text'),
						_elm_lang$html$Html_Attributes$placeholder('url'),
						_elm_lang$html$Html_Events$onInput(_user$project$Accio$Url)
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Accio$GetData)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Get Data')
					])),
				A2(
				_elm_lang$html$Html$section,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$Accio$viewEntries(model.properties)
					]))
			]));
};
var _user$project$Accio$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Accio$init, view: _user$project$Accio$view, update: _user$project$Accio$update, subscriptions: _user$project$Accio$subscriptions})
};

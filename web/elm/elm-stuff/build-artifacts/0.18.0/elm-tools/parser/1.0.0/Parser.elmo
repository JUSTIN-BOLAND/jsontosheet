var _elm_tools$parser$Parser$changeContext = F2(
	function (newContext, _p0) {
		var _p1 = _p0;
		return {source: _p1.source, offset: _p1.offset, indent: _p1.indent, context: newContext, row: _p1.row, col: _p1.col};
	});
var _elm_tools$parser$Parser$ignoreWhileHelp = F7(
	function (predicate, source, offset, indent, context, row, col) {
		ignoreWhileHelp:
		while (true) {
			var newOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, predicate, offset, source);
			if (_elm_lang$core$Native_Utils.eq(newOffset, -1)) {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					{ctor: '_Tuple0'},
					{source: source, offset: offset, indent: indent, context: context, row: row, col: col});
			} else {
				if (_elm_lang$core$Native_Utils.eq(newOffset, -2)) {
					var _v1 = predicate,
						_v2 = source,
						_v3 = offset + 1,
						_v4 = indent,
						_v5 = context,
						_v6 = row + 1,
						_v7 = 1;
					predicate = _v1;
					source = _v2;
					offset = _v3;
					indent = _v4;
					context = _v5;
					row = _v6;
					col = _v7;
					continue ignoreWhileHelp;
				} else {
					var _v8 = predicate,
						_v9 = source,
						_v10 = newOffset,
						_v11 = indent,
						_v12 = context,
						_v13 = row,
						_v14 = col + 1;
					predicate = _v8;
					source = _v9;
					offset = _v10;
					indent = _v11;
					context = _v12;
					row = _v13;
					col = _v14;
					continue ignoreWhileHelp;
				}
			}
		}
	});
var _elm_tools$parser$Parser$ignoreWhile = function (predicate) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (_p2) {
			var _p3 = _p2;
			return A7(_elm_tools$parser$Parser$ignoreWhileHelp, predicate, _p3.source, _p3.offset, _p3.indent, _p3.context, _p3.row, _p3.col);
		});
};
var _elm_tools$parser$Parser$mapWithSource = F2(
	function (func, _p4) {
		var _p5 = _p4;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p6) {
				var _p7 = _p6;
				var _p8 = _p5._0(_p7);
				if (_p8.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p8._0, _p8._1);
				} else {
					var _p9 = _p8._1;
					var subString = A3(_elm_lang$core$String$slice, _p7.offset, _p9.offset, _p7.source);
					return A2(
						_elm_tools$parser$Parser_Internal$Good,
						A2(func, subString, _p8._0),
						_p9);
				}
			});
	});
var _elm_tools$parser$Parser$badFloatMsg = 'The `Parser.float` parser seems to have a bug.\nPlease report an SSCCE to <https://github.com/elm-tools/parser/issues>.';
var _elm_tools$parser$Parser$floatHelp = F3(
	function (offset, zeroOffset, source) {
		return _elm_lang$core$Native_Utils.eq(zeroOffset, -1) ? A2(
			_elm_tools$parser$Parser_Internal$chompDotAndExp,
			A3(_elm_tools$parser$Parser_Internal$chomp, _elm_lang$core$Char$isDigit, offset, source),
			source) : A2(_elm_tools$parser$Parser_Internal$chompDotAndExp, zeroOffset, source);
	});
var _elm_tools$parser$Parser$badIntMsg = 'The `Parser.int` parser seems to have a bug.\nPlease report an SSCCE to <https://github.com/elm-tools/parser/issues>.';
var _elm_tools$parser$Parser$isX = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('x'));
};
var _elm_tools$parser$Parser$isO = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('o'));
};
var _elm_tools$parser$Parser$isZero = function ($char) {
	return _elm_lang$core$Native_Utils.eq(
		$char,
		_elm_lang$core$Native_Utils.chr('0'));
};
var _elm_tools$parser$Parser$intHelp = F3(
	function (offset, zeroOffset, source) {
		return _elm_lang$core$Native_Utils.eq(zeroOffset, -1) ? A3(_elm_tools$parser$Parser_Internal$chompDigits, _elm_lang$core$Char$isDigit, offset, source) : ((!_elm_lang$core$Native_Utils.eq(
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser$isX, zeroOffset, source),
			-1)) ? A3(_elm_tools$parser$Parser_Internal$chompDigits, _elm_lang$core$Char$isHexDigit, offset + 2, source) : (_elm_lang$core$Native_Utils.eq(
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser_Internal$isBadIntEnd, zeroOffset, source),
			-1) ? _elm_lang$core$Result$Ok(zeroOffset) : _elm_lang$core$Result$Err(zeroOffset)));
	});
var _elm_tools$parser$Parser$token = F2(
	function (makeProblem, str) {
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p10) {
				var _p11 = _p10;
				var _p13 = _p11.source;
				var _p12 = A5(_elm_tools$parser_primitives$ParserPrimitives$isSubString, str, _p11.offset, _p11.row, _p11.col, _p13);
				var newOffset = _p12._0;
				var newRow = _p12._1;
				var newCol = _p12._2;
				return _elm_lang$core$Native_Utils.eq(newOffset, -1) ? A2(
					_elm_tools$parser$Parser_Internal$Bad,
					makeProblem(str),
					_p11) : A2(
					_elm_tools$parser$Parser_Internal$Good,
					{ctor: '_Tuple0'},
					{source: _p13, offset: newOffset, indent: _p11.indent, context: _p11.context, row: newRow, col: newCol});
			});
	});
var _elm_tools$parser$Parser$delayedCommitMap = F3(
	function (func, _p15, _p14) {
		var _p16 = _p15;
		var _p17 = _p14;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p18 = _p16._0(state1);
				if (_p18.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p18._0, state1);
				} else {
					var _p22 = _p18._1;
					var _p19 = _p17._0(_p22);
					if (_p19.ctor === 'Good') {
						return A2(
							_elm_tools$parser$Parser_Internal$Good,
							A2(func, _p18._0, _p19._0),
							_p19._1);
					} else {
						var _p21 = _p19._0;
						var _p20 = _p19._1;
						return (_elm_lang$core$Native_Utils.eq(_p22.row, _p20.row) && _elm_lang$core$Native_Utils.eq(_p22.col, _p20.col)) ? A2(_elm_tools$parser$Parser_Internal$Bad, _p21, state1) : A2(_elm_tools$parser$Parser_Internal$Bad, _p21, _p20);
					}
				}
			});
	});
var _elm_tools$parser$Parser$delayedCommit = F2(
	function (filler, realStuff) {
		return A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (_p23, v) {
					return v;
				}),
			filler,
			realStuff);
	});
var _elm_tools$parser$Parser$lazy = function (thunk) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			var _p24 = thunk(
				{ctor: '_Tuple0'});
			var parse = _p24._0;
			return parse(state);
		});
};
var _elm_tools$parser$Parser$andThen = F2(
	function (callback, _p25) {
		var _p26 = _p25;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p27 = _p26._0(state1);
				if (_p27.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p27._0, _p27._1);
				} else {
					var _p28 = callback(_p27._0);
					var parseB = _p28._0;
					return parseB(_p27._1);
				}
			});
	});
var _elm_tools$parser$Parser$apply = F2(
	function (f, a) {
		return f(a);
	});
var _elm_tools$parser$Parser$map2 = F3(
	function (func, _p30, _p29) {
		var _p31 = _p30;
		var _p32 = _p29;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p33 = _p31._0(state1);
				if (_p33.ctor === 'Bad') {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p33._0, _p33._1);
				} else {
					var _p34 = _p32._0(_p33._1);
					if (_p34.ctor === 'Bad') {
						return A2(_elm_tools$parser$Parser_Internal$Bad, _p34._0, _p34._1);
					} else {
						return A2(
							_elm_tools$parser$Parser_Internal$Good,
							A2(func, _p33._0, _p34._0),
							_p34._1);
					}
				}
			});
	});
var _elm_tools$parser$Parser_ops = _elm_tools$parser$Parser_ops || {};
_elm_tools$parser$Parser_ops['|='] = F2(
	function (parseFunc, parseArg) {
		return A3(_elm_tools$parser$Parser$map2, _elm_tools$parser$Parser$apply, parseFunc, parseArg);
	});
var _elm_tools$parser$Parser_ops = _elm_tools$parser$Parser_ops || {};
_elm_tools$parser$Parser_ops['|.'] = F2(
	function (keepParser, ignoreParser) {
		return A3(_elm_tools$parser$Parser$map2, _elm_lang$core$Basics$always, keepParser, ignoreParser);
	});
var _elm_tools$parser$Parser$map = F2(
	function (func, _p35) {
		var _p36 = _p35;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (state1) {
				var _p37 = _p36._0(state1);
				if (_p37.ctor === 'Good') {
					return A2(
						_elm_tools$parser$Parser_Internal$Good,
						func(_p37._0),
						_p37._1);
				} else {
					return A2(_elm_tools$parser$Parser_Internal$Bad, _p37._0, _p37._1);
				}
			});
	});
var _elm_tools$parser$Parser$succeed = function (a) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			return A2(_elm_tools$parser$Parser_Internal$Good, a, state);
		});
};
var _elm_tools$parser$Parser$run = F2(
	function (_p38, source) {
		var _p39 = _p38;
		var initialState = {
			source: source,
			offset: 0,
			indent: 1,
			context: {ctor: '[]'},
			row: 1,
			col: 1
		};
		var _p40 = _p39._0(initialState);
		if (_p40.ctor === 'Good') {
			return _elm_lang$core$Result$Ok(_p40._0);
		} else {
			return _elm_lang$core$Result$Err(
				{row: _p40._1.row, col: _p40._1.col, source: source, problem: _p40._0, context: _p40._1.context});
		}
	});
var _elm_tools$parser$Parser$Error = F5(
	function (a, b, c, d, e) {
		return {row: a, col: b, source: c, problem: d, context: e};
	});
var _elm_tools$parser$Parser$Context = F3(
	function (a, b, c) {
		return {row: a, col: b, description: c};
	});
var _elm_tools$parser$Parser$inContext = F2(
	function (ctx, _p41) {
		var _p42 = _p41;
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p43) {
				var _p44 = _p43;
				var _p46 = _p44.context;
				var state1 = A2(
					_elm_tools$parser$Parser$changeContext,
					{
						ctor: '::',
						_0: A3(_elm_tools$parser$Parser$Context, _p44.row, _p44.col, ctx),
						_1: _p46
					},
					_p44);
				var _p45 = _p42._0(state1);
				if (_p45.ctor === 'Good') {
					return A2(
						_elm_tools$parser$Parser_Internal$Good,
						_p45._0,
						A2(_elm_tools$parser$Parser$changeContext, _p46, _p45._1));
				} else {
					return _p45;
				}
			});
	});
var _elm_tools$parser$Parser$Fail = function (a) {
	return {ctor: 'Fail', _0: a};
};
var _elm_tools$parser$Parser$fail = function (message) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			return A2(
				_elm_tools$parser$Parser_Internal$Bad,
				_elm_tools$parser$Parser$Fail(message),
				state);
		});
};
var _elm_tools$parser$Parser$ExpectingVariable = {ctor: 'ExpectingVariable'};
var _elm_tools$parser$Parser$ExpectingKeyword = function (a) {
	return {ctor: 'ExpectingKeyword', _0: a};
};
var _elm_tools$parser$Parser$keyword = function (str) {
	return A2(_elm_tools$parser$Parser$token, _elm_tools$parser$Parser$ExpectingKeyword, str);
};
var _elm_tools$parser$Parser$ExpectingSymbol = function (a) {
	return {ctor: 'ExpectingSymbol', _0: a};
};
var _elm_tools$parser$Parser$symbol = function (str) {
	return A2(_elm_tools$parser$Parser$token, _elm_tools$parser$Parser$ExpectingSymbol, str);
};
var _elm_tools$parser$Parser$ExpectingEnd = {ctor: 'ExpectingEnd'};
var _elm_tools$parser$Parser$end = _elm_tools$parser$Parser_Internal$Parser(
	function (state) {
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(state.source),
			state.offset) ? A2(
			_elm_tools$parser$Parser_Internal$Good,
			{ctor: '_Tuple0'},
			state) : A2(_elm_tools$parser$Parser_Internal$Bad, _elm_tools$parser$Parser$ExpectingEnd, state);
	});
var _elm_tools$parser$Parser$BadFloat = {ctor: 'BadFloat'};
var _elm_tools$parser$Parser$float = _elm_tools$parser$Parser_Internal$Parser(
	function (_p47) {
		var _p48 = _p47;
		var _p59 = _p48.source;
		var _p58 = _p48.row;
		var _p57 = _p48.offset;
		var _p56 = _p48.indent;
		var _p55 = _p48.context;
		var _p54 = _p48.col;
		var _p49 = A3(
			_elm_tools$parser$Parser$floatHelp,
			_p57,
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser$isZero, _p57, _p59),
			_p59);
		if (_p49.ctor === 'Err') {
			var _p50 = _p49._0;
			return A2(
				_elm_tools$parser$Parser_Internal$Bad,
				_elm_tools$parser$Parser$BadFloat,
				{source: _p59, offset: _p50, indent: _p56, context: _p55, row: _p58, col: _p54 + (_p50 - _p57)});
		} else {
			var _p53 = _p49._0;
			var _p51 = _elm_lang$core$String$toFloat(
				A3(_elm_lang$core$String$slice, _p57, _p53, _p59));
			if (_p51.ctor === 'Err') {
				return _elm_lang$core$Native_Utils.crashCase(
					'Parser',
					{
						start: {line: 695, column: 9},
						end: {line: 707, column: 16}
					},
					_p51)(_elm_tools$parser$Parser$badFloatMsg);
			} else {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					_p51._0,
					{source: _p59, offset: _p53, indent: _p56, context: _p55, row: _p58, col: _p54 + (_p53 - _p57)});
			}
		}
	});
var _elm_tools$parser$Parser$BadInt = {ctor: 'BadInt'};
var _elm_tools$parser$Parser$int = _elm_tools$parser$Parser_Internal$Parser(
	function (_p60) {
		var _p61 = _p60;
		var _p72 = _p61.source;
		var _p71 = _p61.row;
		var _p70 = _p61.offset;
		var _p69 = _p61.indent;
		var _p68 = _p61.context;
		var _p67 = _p61.col;
		var _p62 = A3(
			_elm_tools$parser$Parser$intHelp,
			_p70,
			A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, _elm_tools$parser$Parser$isZero, _p70, _p72),
			_p72);
		if (_p62.ctor === 'Err') {
			var _p63 = _p62._0;
			return A2(
				_elm_tools$parser$Parser_Internal$Bad,
				_elm_tools$parser$Parser$BadInt,
				{source: _p72, offset: _p63, indent: _p69, context: _p68, row: _p71, col: _p67 + (_p63 - _p70)});
		} else {
			var _p66 = _p62._0;
			var diff = _p66 - _p70;
			var _p64 = _elm_lang$core$String$toInt(
				A3(_elm_lang$core$String$slice, _p70, diff, _p72));
			if (_p64.ctor === 'Err') {
				return _elm_lang$core$Native_Utils.crashCase(
					'Parser',
					{
						start: {line: 600, column: 11},
						end: {line: 612, column: 18}
					},
					_p64)(_elm_tools$parser$Parser$badIntMsg);
			} else {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					_p64._0,
					{source: _p72, offset: _p66, indent: _p69, context: _p68, row: _p71, col: _p67 + diff});
			}
		}
	});
var _elm_tools$parser$Parser$BadIgnore = {ctor: 'BadIgnore'};
var _elm_tools$parser$Parser$ignoreHelp = F8(
	function (n, predicate, source, offset, indent, context, row, col) {
		ignoreHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return A2(
					_elm_tools$parser$Parser_Internal$Good,
					{ctor: '_Tuple0'},
					{source: source, offset: offset, indent: indent, context: context, row: row, col: col});
			} else {
				var newOffset = A3(_elm_tools$parser_primitives$ParserPrimitives$isSubChar, predicate, offset, source);
				if (_elm_lang$core$Native_Utils.eq(newOffset, -1)) {
					return A2(
						_elm_tools$parser$Parser_Internal$Bad,
						_elm_tools$parser$Parser$BadIgnore,
						{source: source, offset: offset, indent: indent, context: context, row: row, col: col});
				} else {
					if (_elm_lang$core$Native_Utils.eq(newOffset, -2)) {
						var _v43 = n - 1,
							_v44 = predicate,
							_v45 = source,
							_v46 = offset + 1,
							_v47 = indent,
							_v48 = context,
							_v49 = row + 1,
							_v50 = 1;
						n = _v43;
						predicate = _v44;
						source = _v45;
						offset = _v46;
						indent = _v47;
						context = _v48;
						row = _v49;
						col = _v50;
						continue ignoreHelp;
					} else {
						var _v51 = n - 1,
							_v52 = predicate,
							_v53 = source,
							_v54 = newOffset,
							_v55 = indent,
							_v56 = context,
							_v57 = row,
							_v58 = col + 1;
						n = _v51;
						predicate = _v52;
						source = _v53;
						offset = _v54;
						indent = _v55;
						context = _v56;
						row = _v57;
						col = _v58;
						continue ignoreHelp;
					}
				}
			}
		}
	});
var _elm_tools$parser$Parser$ignore = F2(
	function (n, predicate) {
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p73) {
				var _p74 = _p73;
				return A8(_elm_tools$parser$Parser$ignoreHelp, n, predicate, _p74.source, _p74.offset, _p74.indent, _p74.context, _p74.row, _p74.col);
			});
	});
var _elm_tools$parser$Parser$ignoreUntil = F2(
	function (before, str) {
		return _elm_tools$parser$Parser_Internal$Parser(
			function (_p75) {
				var _p76 = _p75;
				var _p78 = _p76.source;
				var _p77 = A6(_elm_tools$parser_primitives$ParserPrimitives$findSubString, before, str, _p76.offset, _p76.row, _p76.col, _p78);
				var newOffset = _p77._0;
				var newRow = _p77._1;
				var newCol = _p77._2;
				return _elm_lang$core$Native_Utils.eq(newOffset, -1) ? A2(_elm_tools$parser$Parser_Internal$Bad, _elm_tools$parser$Parser$BadIgnore, _p76) : A2(
					_elm_tools$parser$Parser_Internal$Good,
					{ctor: '_Tuple0'},
					{source: _p78, offset: newOffset, indent: _p76.indent, context: _p76.context, row: newRow, col: newCol});
			});
	});
var _elm_tools$parser$Parser$ignoreUntilAfter = function (str) {
	return A2(_elm_tools$parser$Parser$ignoreUntil, false, str);
};
var _elm_tools$parser$Parser$ignoreUntilBefore = function (str) {
	return A2(_elm_tools$parser$Parser$ignoreUntil, true, str);
};
var _elm_tools$parser$Parser$BadOneOf = function (a) {
	return {ctor: 'BadOneOf', _0: a};
};
var _elm_tools$parser$Parser$oneOfHelp = F3(
	function (state, problems, parsers) {
		oneOfHelp:
		while (true) {
			var _p79 = parsers;
			if (_p79.ctor === '[]') {
				return A2(
					_elm_tools$parser$Parser_Internal$Bad,
					_elm_tools$parser$Parser$BadOneOf(
						_elm_lang$core$List$reverse(problems)),
					state);
			} else {
				var _p80 = _p79._0._0(state);
				if (_p80.ctor === 'Good') {
					return _p80;
				} else {
					if (_elm_lang$core$Native_Utils.eq(state.row, _p80._1.row) && _elm_lang$core$Native_Utils.eq(state.col, _p80._1.col)) {
						var _v63 = state,
							_v64 = {ctor: '::', _0: _p80._0, _1: problems},
							_v65 = _p79._1;
						state = _v63;
						problems = _v64;
						parsers = _v65;
						continue oneOfHelp;
					} else {
						return _p80;
					}
				}
			}
		}
	});
var _elm_tools$parser$Parser$oneOf = function (parsers) {
	return _elm_tools$parser$Parser_Internal$Parser(
		function (state) {
			return A3(
				_elm_tools$parser$Parser$oneOfHelp,
				state,
				{ctor: '[]'},
				parsers);
		});
};
var _elm_tools$parser$Parser$zeroOrMoreHelp = F2(
	function (parser, revValues) {
		return _elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$andThen,
					function (value) {
						return A2(
							_elm_tools$parser$Parser$zeroOrMoreHelp,
							parser,
							{ctor: '::', _0: value, _1: revValues});
					},
					parser),
				_1: {
					ctor: '::',
					_0: _elm_tools$parser$Parser$succeed(
						_elm_lang$core$List$reverse(revValues)),
					_1: {ctor: '[]'}
				}
			});
	});
var _elm_tools$parser$Parser$zeroOrMore = function (parser) {
	return A2(
		_elm_tools$parser$Parser$zeroOrMoreHelp,
		parser,
		{ctor: '[]'});
};

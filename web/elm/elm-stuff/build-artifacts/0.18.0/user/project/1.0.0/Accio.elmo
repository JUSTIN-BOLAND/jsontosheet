var _user$project$Accio$getHeaders = function (token) {
	return A2(
		_elm_lang$http$Http$header,
		'Authorization',
		A2(_elm_lang$core$Basics_ops['++'], 'Bearer ', token));
};
var _user$project$Accio$putRequest = function (token) {
	return _elm_lang$http$Http$request(
		{
			method: 'POST',
			headers: {
				ctor: '::',
				_0: _user$project$Accio$getHeaders(
					A2(_elm_lang$core$Debug$log, 'token', token)),
				_1: {ctor: '[]'}
			},
			url: 'https://sheets.googleapis.com/v4/spreadsheets',
			body: _elm_lang$http$Http$multipartBody(
				{
					ctor: '::',
					_0: A2(_elm_lang$http$Http$stringPart, 'spreadsheetID', ''),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$http$Http$stringPart, 'properties', '\n                                { \"title\": \"test\"}\n                                '),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$http$Http$stringPart, 'sheets', '\n                                {\"data\":[{\"startRow\" :0}]}\n                                '),
							_1: {ctor: '[]'}
						}
					}
				}),
			expect: _elm_lang$http$Http$expectJson(
				A2(_elm_lang$core$Json_Decode$field, 'spreadsheetUrl', _elm_lang$core$Json_Decode$string)),
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
var _user$project$Accio$nestKeys = F2(
	function (nestedNames, key) {
		var _p0 = nestedNames;
		if (_p0 === '') {
			return key;
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_p0,
				A2(_elm_lang$core$Basics_ops['++'], '/', key));
		}
	});
var _user$project$Accio$destructureArray = F5(
	function (nestedName, key, list, acc, counter) {
		destructureArray:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '::') {
				var _p3 = _p1._1;
				var _p2 = _p1._0;
				switch (_p2.ctor) {
					case 'JsonString':
						var _v3 = nestedName,
							_v4 = key,
							_v5 = _p3,
							_v6 = {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_user$project$Accio$nestKeys, nestedName, key),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'/',
										_elm_lang$core$Basics$toString(counter))),
								_1: _elm_lang$core$Json_Encode$string(_p2._0)
							},
							_1: acc
						},
							_v7 = counter + 1;
						nestedName = _v3;
						key = _v4;
						list = _v5;
						acc = _v6;
						counter = _v7;
						continue destructureArray;
					case 'JsonInt':
						var _v8 = nestedName,
							_v9 = key,
							_v10 = _p3,
							_v11 = {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_user$project$Accio$nestKeys, nestedName, key),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'/',
										_elm_lang$core$Basics$toString(counter))),
								_1: _elm_lang$core$Json_Encode$int(_p2._0)
							},
							_1: acc
						},
							_v12 = counter + 1;
						nestedName = _v8;
						key = _v9;
						list = _v10;
						acc = _v11;
						counter = _v12;
						continue destructureArray;
					case 'JsonNull':
						var _v13 = nestedName,
							_v14 = key,
							_v15 = _p3,
							_v16 = {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									A2(_user$project$Accio$nestKeys, nestedName, key),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'/',
										_elm_lang$core$Basics$toString(counter))),
								_1: _elm_lang$core$Json_Encode$null
							},
							_1: acc
						},
							_v17 = counter + 1;
						nestedName = _v13;
						key = _v14;
						list = _v15;
						acc = _v16;
						counter = _v17;
						continue destructureArray;
					default:
						return {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'error', _1: _elm_lang$core$Json_Encode$null},
							_1: {ctor: '[]'}
						};
				}
			} else {
				return acc;
			}
		}
	});
var _user$project$Accio$toKeyValuePair = function (segment) {
	var _p4 = A2(_elm_lang$core$String$split, '=', segment);
	if (((_p4.ctor === '::') && (_p4._1.ctor === '::')) && (_p4._1._1.ctor === '[]')) {
		return A3(
			_elm_lang$core$Maybe$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_elm_lang$http$Http$decodeUri(_p4._0),
			_elm_lang$http$Http$decodeUri(_p4._1._0));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Accio$parseToken = function (location) {
	var _p5 = A2(_evancz$url_parser$UrlParser$parseHash, _evancz$url_parser$UrlParser$string, location);
	if (_p5.ctor === 'Just') {
		return A2(
			_elm_lang$core$Dict$get,
			'access_token',
			_elm_lang$core$Dict$fromList(
				A2(
					_elm_lang$core$List$filterMap,
					_user$project$Accio$toKeyValuePair,
					A2(_elm_lang$core$String$split, '&', _p5._0))));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Accio$Model = F5(
	function (a, b, c, d, e) {
		return {url: a, errorMessage: b, keyValues: c, token: d, spreadsheetUrl: e};
	});
var _user$project$Accio$init = function (location) {
	return {
		ctor: '_Tuple2',
		_0: A5(
			_user$project$Accio$Model,
			'',
			'',
			{ctor: '[]'},
			_user$project$Accio$parseToken(location),
			''),
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$Accio$JsonArray = function (a) {
	return {ctor: 'JsonArray', _0: a};
};
var _user$project$Accio$JsonNull = {ctor: 'JsonNull'};
var _user$project$Accio$JsonInt = function (a) {
	return {ctor: 'JsonInt', _0: a};
};
var _user$project$Accio$JsonFloat = function (a) {
	return {ctor: 'JsonFloat', _0: a};
};
var _user$project$Accio$JsonObject = function (a) {
	return {ctor: 'JsonObject', _0: a};
};
var _user$project$Accio$destructure = F3(
	function (acc, nestedName, jsonVal) {
		destructure:
		while (true) {
			var _p6 = jsonVal;
			if (_p6.ctor === 'JsonObject') {
				var _p7 = _elm_lang$core$Dict$toList(_p6._0);
				if (_p7.ctor === '::') {
					var _p9 = _p7._1;
					var _p8 = _p7._0;
					switch (_p8._1.ctor) {
						case 'JsonString':
							var _v23 = {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: A2(_user$project$Accio$nestKeys, nestedName, _p8._0),
									_1: _elm_lang$core$Json_Encode$string(_p8._1._0)
								},
								_1: acc
							},
								_v24 = nestedName,
								_v25 = _user$project$Accio$JsonObject(
								_elm_lang$core$Dict$fromList(_p9));
							acc = _v23;
							nestedName = _v24;
							jsonVal = _v25;
							continue destructure;
						case 'JsonInt':
							var _v26 = {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: A2(_user$project$Accio$nestKeys, nestedName, _p8._0),
									_1: _elm_lang$core$Json_Encode$int(_p8._1._0)
								},
								_1: acc
							},
								_v27 = nestedName,
								_v28 = _user$project$Accio$JsonObject(
								_elm_lang$core$Dict$fromList(_p9));
							acc = _v26;
							nestedName = _v27;
							jsonVal = _v28;
							continue destructure;
						case 'JsonFloat':
							var _v29 = {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: A2(_user$project$Accio$nestKeys, nestedName, _p8._0),
									_1: _elm_lang$core$Json_Encode$float(_p8._1._0)
								},
								_1: acc
							},
								_v30 = nestedName,
								_v31 = _user$project$Accio$JsonObject(
								_elm_lang$core$Dict$fromList(_p9));
							acc = _v29;
							nestedName = _v30;
							jsonVal = _v31;
							continue destructure;
						case 'JsonNull':
							var _v32 = {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: A2(_user$project$Accio$nestKeys, nestedName, _p8._0),
									_1: _elm_lang$core$Json_Encode$null
								},
								_1: acc
							},
								_v33 = nestedName,
								_v34 = _user$project$Accio$JsonObject(
								_elm_lang$core$Dict$fromList(_p9));
							acc = _v32;
							nestedName = _v33;
							jsonVal = _v34;
							continue destructure;
						case 'JsonArray':
							var _v35 = A2(
								_elm_lang$core$Basics_ops['++'],
								A5(
									_user$project$Accio$destructureArray,
									nestedName,
									_p8._0,
									_p8._1._0,
									{ctor: '[]'},
									0),
								acc),
								_v36 = nestedName,
								_v37 = _user$project$Accio$JsonObject(
								_elm_lang$core$Dict$fromList(_p9));
							acc = _v35;
							nestedName = _v36;
							jsonVal = _v37;
							continue destructure;
						default:
							return A2(
								_elm_lang$core$Basics_ops['++'],
								A3(
									_user$project$Accio$destructure,
									acc,
									'',
									_user$project$Accio$JsonObject(
										_elm_lang$core$Dict$fromList(_p9))),
								A3(
									_user$project$Accio$destructure,
									{ctor: '[]'},
									A2(_user$project$Accio$nestKeys, nestedName, _p8._0),
									_user$project$Accio$JsonObject(_p8._1._0)));
					}
				} else {
					var _p10 = _p7;
					if (((_p10.ctor === '::') && (_p10._0.ctor === '_Tuple2')) && (_p10._1.ctor === '[]')) {
						switch (_p10._0._1.ctor) {
							case 'JsonString':
								return {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: A2(_user$project$Accio$nestKeys, nestedName, _p10._0._0),
										_1: _elm_lang$core$Json_Encode$string(_p10._0._1._0)
									},
									_1: acc
								};
							case 'JsonInt':
								return {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: A2(_user$project$Accio$nestKeys, nestedName, _p10._0._0),
										_1: _elm_lang$core$Json_Encode$int(_p10._0._1._0)
									},
									_1: acc
								};
							case 'JsonFloat':
								return {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: A2(_user$project$Accio$nestKeys, nestedName, _p10._0._0),
										_1: _elm_lang$core$Json_Encode$float(_p10._0._1._0)
									},
									_1: acc
								};
							case 'JsonNull':
								return {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: A2(_user$project$Accio$nestKeys, nestedName, _p10._0._0),
										_1: _elm_lang$core$Json_Encode$null
									},
									_1: acc
								};
							case 'JsonArray':
								return A2(
									_elm_lang$core$Basics_ops['++'],
									A5(
										_user$project$Accio$destructureArray,
										nestedName,
										_p10._0._0,
										_p10._0._1._0,
										{ctor: '[]'},
										0),
									acc);
							default:
								var _v39 = acc,
									_v40 = A2(_user$project$Accio$nestKeys, nestedName, _p10._0._0),
									_v41 = _user$project$Accio$JsonObject(_p10._0._1._0);
								acc = _v39;
								nestedName = _v40;
								jsonVal = _v41;
								continue destructure;
						}
					} else {
						return acc;
					}
				}
			} else {
				return {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'y',
						_1: _elm_lang$core$Json_Encode$string('case')
					},
					_1: {ctor: '[]'}
				};
			}
		}
	});
var _user$project$Accio$flattenAndEncode = function (json) {
	var _p11 = json;
	if (_p11.ctor === 'Ok') {
		var _p12 = _p11._0;
		switch (_p12.ctor) {
			case 'JsonObject':
				return {
					ctor: '::',
					_0: A3(
						_user$project$Accio$destructure,
						{ctor: '[]'},
						'',
						_user$project$Accio$JsonObject(_p12._0)),
					_1: {ctor: '[]'}
				};
			case 'JsonArray':
				return A2(
					_elm_lang$core$List$map,
					A2(
						_user$project$Accio$destructure,
						{ctor: '[]'},
						''),
					_p12._0);
			default:
				return {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'error',
							_1: _elm_lang$core$Json_Encode$string('irregular json')
						},
						_1: {ctor: '[]'}
					},
					_1: {ctor: '[]'}
				};
		}
	} else {
		return {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'error',
					_1: _elm_lang$core$Json_Encode$string(_p11._0)
				},
				_1: {ctor: '[]'}
			},
			_1: {ctor: '[]'}
		};
	}
};
var _user$project$Accio$JsonString = function (a) {
	return {ctor: 'JsonString', _0: a};
};
var _user$project$Accio$jsonDecoder = _elm_lang$core$Json_Decode$oneOf(
	{
		ctor: '::',
		_0: A2(_elm_lang$core$Json_Decode$map, _user$project$Accio$JsonString, _elm_lang$core$Json_Decode$string),
		_1: {
			ctor: '::',
			_0: A2(_elm_lang$core$Json_Decode$map, _user$project$Accio$JsonInt, _elm_lang$core$Json_Decode$int),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _user$project$Accio$JsonFloat, _elm_lang$core$Json_Decode$float),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Json_Decode$map,
						_user$project$Accio$JsonArray,
						_elm_lang$core$Json_Decode$list(
							_elm_lang$core$Json_Decode$lazy(
								function (_p13) {
									return _user$project$Accio$jsonDecoder;
								}))),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Json_Decode$map,
							_user$project$Accio$JsonObject,
							_elm_lang$core$Json_Decode$dict(
								_elm_lang$core$Json_Decode$lazy(
									function (_p14) {
										return _user$project$Accio$jsonDecoder;
									}))),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Json_Decode$null(_user$project$Accio$JsonNull),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$Accio$createSheet = function (response) {
	return _user$project$Accio$flattenAndEncode(
		A2(_elm_lang$core$Json_Decode$decodeString, _user$project$Accio$jsonDecoder, response));
};
var _user$project$Accio$PostCsv = function (a) {
	return {ctor: 'PostCsv', _0: a};
};
var _user$project$Accio$requestCsv = function (token) {
	var _p15 = token;
	if (_p15.ctor === 'Just') {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Accio$PostCsv,
			_user$project$Accio$putRequest(_p15._0));
	} else {
		return _elm_lang$core$Platform_Cmd$none;
	}
};
var _user$project$Accio$GetCsv = {ctor: 'GetCsv'};
var _user$project$Accio$Fetch = function (a) {
	return {ctor: 'Fetch', _0: a};
};
var _user$project$Accio$getJson = function (url) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Accio$Fetch,
		_elm_lang$http$Http$getString(url));
};
var _user$project$Accio$update = F2(
	function (msg, model) {
		var _p16 = msg;
		switch (_p16.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Url':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{url: _p16._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GetData':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Accio$getJson(model.url)
				};
			case 'Fetch':
				if (_p16._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								keyValues: _user$project$Accio$createSheet(_p16._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								errorMessage: _elm_lang$core$Basics$toString(_elm_lang$core$Result$Err)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'GetCsv':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Accio$requestCsv(model.token)
				};
			default:
				if (_p16._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{spreadsheetUrl: _p16._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _user$project$Accio$GetData = {ctor: 'GetData'};
var _user$project$Accio$Url = function (a) {
	return {ctor: 'Url', _0: a};
};
var _user$project$Accio$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href(_user$project$OAuth$requestToken),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Authorize Google'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href(model.spreadsheetUrl),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Click here to see your spreadsheet'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(model.keyValues)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('text'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$placeholder('url'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Accio$Url),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Accio$GetData),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Get Data'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Accio$GetCsv),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Create Google Sheet'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};
var _user$project$Accio$NoOp = {ctor: 'NoOp'};
var _user$project$Accio$main = A2(
	_elm_lang$navigation$Navigation$program,
	_elm_lang$core$Basics$always(_user$project$Accio$NoOp),
	{
		init: _user$project$Accio$init,
		view: _user$project$Accio$view,
		update: _user$project$Accio$update,
		subscriptions: function (_p17) {
			return _elm_lang$core$Platform_Sub$none;
		}
	})();

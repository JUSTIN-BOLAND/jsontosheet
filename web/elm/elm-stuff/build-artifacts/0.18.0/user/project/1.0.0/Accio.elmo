var _user$project$Accio$pad = function (indent) {
	return A3(
		_elm_lang$core$String$padLeft,
		5,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(indent));
};
var _user$project$Accio$incr = 20;
var _user$project$Accio$uniqueHead = '##FORMAT##';
var _user$project$Accio$newLineChars = ',';
var _user$project$Accio$outdentChars = '}]';
var _user$project$Accio$indentChars = '{[';
var _user$project$Accio$quote = '\"';
var _user$project$Accio$formatString = F4(
	function (acc, isInQuotes, indent, str) {
		formatString:
		while (true) {
			var _p0 = A2(_elm_lang$core$String$left, 1, str);
			if (_p0 === '') {
				return acc;
			} else {
				var _p1 = _p0;
				if (isInQuotes) {
					if (_elm_lang$core$Native_Utils.eq(_p1, _user$project$Accio$quote)) {
						var _v1 = A2(_elm_lang$core$Basics_ops['++'], acc, _p1),
							_v2 = !isInQuotes,
							_v3 = indent,
							_v4 = A2(_elm_lang$core$String$dropLeft, 1, str);
						acc = _v1;
						isInQuotes = _v2;
						indent = _v3;
						str = _v4;
						continue formatString;
					} else {
						var _v5 = A2(_elm_lang$core$Basics_ops['++'], acc, _p1),
							_v6 = isInQuotes,
							_v7 = indent,
							_v8 = A2(_elm_lang$core$String$dropLeft, 1, str);
						acc = _v5;
						isInQuotes = _v6;
						indent = _v7;
						str = _v8;
						continue formatString;
					}
				} else {
					if (A2(_elm_lang$core$String$contains, _p1, _user$project$Accio$newLineChars)) {
						var _v9 = A2(
							_elm_lang$core$Basics_ops['++'],
							acc,
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p1,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Accio$uniqueHead,
									_user$project$Accio$pad(indent)))),
							_v10 = isInQuotes,
							_v11 = indent,
							_v12 = A2(_elm_lang$core$String$dropLeft, 1, str);
						acc = _v9;
						isInQuotes = _v10;
						indent = _v11;
						str = _v12;
						continue formatString;
					} else {
						if (A2(_elm_lang$core$String$contains, _p1, _user$project$Accio$indentChars)) {
							var _v13 = A2(
								_elm_lang$core$Basics_ops['++'],
								acc,
								A2(
									_elm_lang$core$Basics_ops['++'],
									_user$project$Accio$uniqueHead,
									A2(
										_elm_lang$core$Basics_ops['++'],
										_user$project$Accio$pad(indent + _user$project$Accio$incr),
										_p1))),
								_v14 = isInQuotes,
								_v15 = indent + _user$project$Accio$incr,
								_v16 = A2(_elm_lang$core$String$dropLeft, 1, str);
							acc = _v13;
							isInQuotes = _v14;
							indent = _v15;
							str = _v16;
							continue formatString;
						} else {
							if (A2(_elm_lang$core$String$contains, _p1, _user$project$Accio$outdentChars)) {
								var _v17 = A2(
									_elm_lang$core$Basics_ops['++'],
									acc,
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p1,
										A2(
											_elm_lang$core$Basics_ops['++'],
											_user$project$Accio$uniqueHead,
											_user$project$Accio$pad(indent - _user$project$Accio$incr)))),
									_v18 = isInQuotes,
									_v19 = indent - _user$project$Accio$incr,
									_v20 = A2(_elm_lang$core$String$dropLeft, 1, str);
								acc = _v17;
								isInQuotes = _v18;
								indent = _v19;
								str = _v20;
								continue formatString;
							} else {
								if (_elm_lang$core$Native_Utils.eq(_p1, _user$project$Accio$quote)) {
									var _v21 = A2(_elm_lang$core$Basics_ops['++'], acc, _p1),
										_v22 = !isInQuotes,
										_v23 = indent,
										_v24 = A2(_elm_lang$core$String$dropLeft, 1, str);
									acc = _v21;
									isInQuotes = _v22;
									indent = _v23;
									str = _v24;
									continue formatString;
								} else {
									var _v25 = A2(_elm_lang$core$Basics_ops['++'], acc, _p1),
										_v26 = isInQuotes,
										_v27 = indent,
										_v28 = A2(_elm_lang$core$String$dropLeft, 1, str);
									acc = _v25;
									isInQuotes = _v26;
									indent = _v27;
									str = _v28;
									continue formatString;
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Accio$px = function ($int) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString($int),
		'px');
};
var _user$project$Accio$parseJson = function (json) {
	return A2(
		_elm_lang$core$String$split,
		_user$project$Accio$uniqueHead,
		A4(_user$project$Accio$formatString, '', false, 0, json));
};
var _user$project$Accio$newKeyValue = F2(
	function (str, id) {
		var _p2 = A2(_elm_lang$core$String$split, '\":\"', str);
		if (_p2.ctor === '::') {
			if ((_p2._1.ctor === '::') && (_p2._1._1.ctor === '[]')) {
				return {
					key: A2(_elm_lang$core$String$dropLeft, 5, _p2._0),
					value: _p2._1._0,
					selected: false,
					id: id,
					indent: A2(
						_elm_lang$core$Result$withDefault,
						0,
						_elm_lang$core$String$toInt(
							A2(_elm_lang$core$String$left, 5, str)))
				};
			} else {
				return {
					key: A2(_elm_lang$core$String$dropLeft, 5, _p2._0),
					value: '',
					selected: false,
					id: id,
					indent: A2(
						_elm_lang$core$Result$withDefault,
						0,
						_elm_lang$core$String$toInt(
							A2(_elm_lang$core$String$left, 5, str)))
				};
			}
		} else {
			return {key: 'something', value: ' is worng', selected: false, id: id, indent: 1};
		}
	});
var _user$project$Accio$formatKeyValues = F3(
	function (response, uid, acc) {
		formatKeyValues:
		while (true) {
			var _p3 = response;
			if (_p3.ctor === '[]') {
				return _elm_lang$core$List$reverse(acc);
			} else {
				var _v31 = _p3._1,
					_v32 = uid + 1,
					_v33 = {
					ctor: '::',
					_0: A2(_user$project$Accio$newKeyValue, _p3._0, uid),
					_1: acc
				};
				response = _v31;
				uid = _v32;
				acc = _v33;
				continue formatKeyValues;
			}
		}
	});
var _user$project$Accio$enterKeyValues = function (response) {
	return A3(
		_user$project$Accio$formatKeyValues,
		_user$project$Accio$parseJson(response),
		1,
		{ctor: '[]'});
};
var _user$project$Accio$format = _elm_lang$core$Native_Platform.outgoingPort(
	'format',
	function (v) {
		return v;
	});
var _user$project$Accio$stringyfiedJson = _elm_lang$core$Native_Platform.incomingPort('stringyfiedJson', _elm_lang$core$Json_Decode$string);
var _user$project$Accio$Model = F3(
	function (a, b, c) {
		return {url: a, errorMessage: b, keyValues: c};
	});
var _user$project$Accio$init = {
	ctor: '_Tuple2',
	_0: A3(
		_user$project$Accio$Model,
		'',
		'',
		{ctor: '[]'}),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Accio$KeyValue = F5(
	function (a, b, c, d, e) {
		return {key: a, value: b, selected: c, id: d, indent: e};
	});
var _user$project$Accio$Select = function (a) {
	return {ctor: 'Select', _0: a};
};
var _user$project$Accio$viewLine = function (keyValue) {
	return A2(
		_elm_lang$html$Html$p,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'selected', _1: keyValue.selected},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'unselected',
							_1: _elm_lang$core$Native_Utils.eq(keyValue.selected, false)
						},
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'paddingLeft',
							_1: _user$project$Accio$px(keyValue.indent)
						},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'marginTop', _1: '0px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'marginBottom', _1: '0px'},
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_user$project$Accio$Select(keyValue.key)),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					keyValue.key,
					A2(_elm_lang$core$Basics_ops['++'], '  ', keyValue.value))),
			_1: {ctor: '[]'}
		});
};
var _user$project$Accio$viewKeyedLi = function (keyValue) {
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Basics$toString(keyValue.id),
		_1: A2(_elm_lang$html$Html_Lazy$lazy, _user$project$Accio$viewLine, keyValue)
	};
};
var _user$project$Accio$viewKeyValues = function (keyValues) {
	return A2(
		_elm_lang$html$Html$section,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('main'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html_Keyed$ul,
				{ctor: '[]'},
				A2(_elm_lang$core$List$map, _user$project$Accio$viewKeyedLi, keyValues)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Accio$Fetch = function (a) {
	return {ctor: 'Fetch', _0: a};
};
var _user$project$Accio$getJson = function (url) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Accio$Fetch,
		_elm_lang$http$Http$getString(
			A2(_elm_lang$core$Basics_ops['++'], 'http://localhost:4000/response?url=', url)));
};
var _user$project$Accio$update = F2(
	function (msg, model) {
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'Add':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							keyValues: A2(
								_elm_lang$core$List$append,
								model.keyValues,
								_user$project$Accio$enterKeyValues(_p4._0))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Url':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{url: _p4._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GetData':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Accio$getJson(model.url)
				};
			case 'Fetch':
				if (_p4._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$Accio$format(_p4._0._0)
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								errorMessage: _elm_lang$core$Basics$toString(_elm_lang$core$Result$Err)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			default:
				var updateSelected = function (t) {
					return _elm_lang$core$Native_Utils.eq(t.key, _p4._0) ? _elm_lang$core$Native_Utils.update(
						t,
						{selected: !t.selected}) : t;
				};
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							keyValues: A2(_elm_lang$core$List$map, updateSelected, model.keyValues)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Accio$GetData = {ctor: 'GetData'};
var _user$project$Accio$Url = function (a) {
	return {ctor: 'Url', _0: a};
};
var _user$project$Accio$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(_user$project$Parser$parsedJson),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('text'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$placeholder('url'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onInput(_user$project$Accio$Url),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Accio$GetData),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Get Data'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$section,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _user$project$Accio$viewKeyValues(model.keyValues),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Accio$Add = function (a) {
	return {ctor: 'Add', _0: a};
};
var _user$project$Accio$subscriptions = function (model) {
	return _user$project$Accio$stringyfiedJson(_user$project$Accio$Add);
};
var _user$project$Accio$main = _elm_lang$html$Html$program(
	{init: _user$project$Accio$init, view: _user$project$Accio$view, update: _user$project$Accio$update, subscriptions: _user$project$Accio$subscriptions})();
